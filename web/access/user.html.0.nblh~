<html>
<head>
<title>
Quest | User
</title>
 <script type="text/javascript" src="files/util.js"></script>
 <script type="text/javascript" src="files/client_ajax.js"></script>
  <link rel="stylesheet" href="../../themes/base/jquery.ui.all.css">
	<script src="../../js/jquery-1.7.2.js"></script>
	<script src="../../ui/jquery.ui.core.js"></script>
	<script src="../../ui/jquery.ui.widget.js"></script>
	<script src="../../ui/jquery.ui.button.js"></script>
        <script src="../../ui/jquery.ui.position.js"></script>
	<script src="../../ui/jquery.ui.autocomplete.js"></script>
	<link rel="stylesheet" href="../../css/demos.css">
	<style>
	.ui-button { margin-left: -1px; }
	.ui-button-icon-only .ui-button-text { padding: 0.35em; } 
	.ui-autocomplete-input { margin: 0; padding: 0.48em 0 0.47em 0.45em; }
	</style>	
	 <link rel="stylesheet" type="text/css" href="files/access.css" />
 <script type="text/javascript">
        var groups=[];
	 var privileges=[];
     function createUser(){
         var name=document.getElementById("username").value;
         var host=document.getElementById("host").value;
         var preGroup=document.getElementById("pgroup").value;
         var ugroup=document.getElementById("ugroup").value;
	  
            if(name=="" || name==null){
              alert("Username is required");
              return
            }
            if(host=="" || host==null){
               alert("Host is required");
              return
            }
            var privs=getMultipleEntries("privileges");
            var qstring="user_name="+name+"&host="+host+"&preset_group="+preGroup+"&group="+ugroup;
            for(x=0; x<privs.length; x++){
              qstring=qstring+"&priv="+privs[x];   
            }
            
         var request=getRequestObject();
        sendRequest('POST','../../login','create_user',qstring,handleCreateUser(request),request,null); 
     }

function getMultipleEntries(fld){
  var sel=document.getElementById(fld).value;
   var values=[];
   for(x=0; x<sel.length; x++){
       if(sel[x]==","){
         var ans=sel.slice(0,x) 
          values.push(ans);
           sel=sel.slice(x+1,sel.length);
       }
   }
   alert(values[1]);
   alert(values[2])
}
 function handleCreateUser(request){
    return function() {
         if (request.readyState == 4) {
           if (request.status == 200) {
            var resp=request.responseText;
             if(resp=="success"){
              alert("User created successfully");  
             }
             else{
              alert(resp);     
             }
         } else {
         setInfo("communication error");
      }
    }
  };   
}
     function handleUserGroup(request){
       return function() {
         if (request.readyState == 4) {
           if (request.status == 200) {
            var resp=request.responseText;
            var arr=(eval(resp));
		    groups=arr;
        } else {
         setInfo("communication error");
      }
    }
  };
}



    function handlePresetNames(request){
       return function() {
         if (request.readyState == 4) {
           if (request.status == 200) {
            var resp=request.responseText;
           var arr=(eval(resp));
           populateSelect("pgroup", arr, arr);
        } else {
      setInfo("communication error");
      }
    }
  };
}

    function handlePrivilegeNames(request){
        return function() {
         if (request.readyState == 4) {
           if (request.status == 200) {
            var resp=request.responseText;
           var arr=(eval(resp));
		  privileges=arr;
        } else {
        setInfo("communication error");
      }
    }
  };
}
    
     function initializeData(){
          var request=getRequestObject();
          var request1=getRequestObject();
          var request2=getRequestObject();
          sendRequest('POST','../../login','all_user_groups',null,handleUserGroup(request),request,'user_service');
          sendRequest('POST','../../login','all_preset_names',null,handlePresetNames(request1),request1,'user_service');
          sendRequest('POST','../../login','all_privilege_names',null,handlePrivilegeNames(request2),request2,'user_service');  
      }
      
	  
//--------------------------------------------------------------------------------------------	  
	  
	  (function( $ ) {
		$.widget( "ui.combobox", {
			_create: function() {
				var self = this,
					select = this.element.hide(),
					selected = select.children( ":selected" ),
					value = selected.val() ? selected.text() : "";
				var input = this.input = $( "<input>" )
					.insertAfter( select )
					.val( value )
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: function( request, response ) {
							var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
							response( select.children( "option" ).map(function() {
								var text = $( this ).text();
								if ( this.value && ( !request.term || matcher.test(text) ) )
									return {
										label: text.replace(
											new RegExp(
												"(?![^&;]+;)(?!<[^<>]*)(" +
												$.ui.autocomplete.escapeRegex(request.term) +
												")(?![^<>]*>)(?![^&;]+;)", "gi"
											), "<strong>$1</strong>" ),
										value: text,
										option: this
									};
							}) );
						},
						select: function( event, ui ) {
							ui.item.option.selected = true;
							self._trigger( "selected", event, {
								item: ui.item.option
							});
						},
						change: function( event, ui ) {
							if ( !ui.item ) {
								var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
									valid = false;
								select.children( "option" ).each(function() {
									if ( $( this ).text().match( matcher ) ) {
										this.selected = valid = true;
										return false;
									}
								});
								if ( !valid ) {
									// remove invalid value, as it didn't match anything
									$( this ).val( "" );
									select.val( "" );
									input.data( "autocomplete" ).term = "";
									return false;
								}
							}
						}
					})
					.addClass( "ui-widget ui-widget-content ui-corner-left" );

				input.data( "autocomplete" )._renderItem = function( ul, item ) {
					return $( "<li></li>" )
						.data( "item.autocomplete", item )
						.append( "<a>" + item.label + "</a>" )
						.appendTo( ul );
				};

				this.button = $( "<button type='button'>&nbsp;</button>" )
					.attr( "tabIndex", -1 )
					.attr( "title", "Show All Items" )
					.insertAfter( input )
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.removeClass( "ui-corner-all" )
					.addClass( "ui-corner-right ui-button-icon" )
					.click(function() {
						// close if already visible
						if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
							input.autocomplete( "close" );
							return;
						}

						// work around a bug (likely same cause as #5265)
						$( this ).blur();

						// pass empty string as value to search for, displaying all results
						input.autocomplete( "search", "" );
						input.focus();
					});
			},

			destroy: function() {
				this.input.remove();
				this.button.remove();
				this.element.show();
				$.Widget.prototype.destroy.call( this );
			}
		});
	})( jQuery );

	$(function() {
	    $( "#edit_privileges").combobox();
		$( "#pgroup").combobox();
		
		$( "#toggle" ).click(function() {
			$( "#pgroup" ).toggle();
		});
		$( "#toggle" ).click(function() {
			$( "#edit_privileges" ).toggle();
		});
	});
	
	
	
	function completeGroup(group){
	 $( group ).autocomplete({
			source: groups
		});
	}
	
	//---------------------------------------------------------------------------------------
	
	function completePrivileges(priv) {
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}
        
		
		$(priv)
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						privileges, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	}
	
    	$(function() {
		$( "button", ".demo" ).button();
		$( "#create_user").click(createUser);
	});
     </script>
</head>

<body onload="initializeData()">
    <div align="center">
  <table id="createuser">
      <tr>
          <td>
            Username
          </td>
	  <td>
	    <input type="text" id="username" />
	  </td>
      </tr>
      <tr>
          <td>
            Host 
          </td>
	  <td>
	    <input type="text" id="host" />
	  </td>
      </tr>
      <tr>
          <td>
            Preset Group 
          </td>
	  <td>
        <div class="ui-widget">
	      <select id="pgroup">
	</select>
</div>      
	  </td>
      </tr>
      <tr>
          <td>
            Privileges 
          </td>
	  <td>
   <div class="ui-widget">
	<input id="privileges" size="50"  onfocus="completePrivileges('#privileges')"/>
     </div> 
			
	  </td>
      </tr>
      <tr>
          <td>
            User Group 
          </td>
	  <td>
	  <div class="ui-widget">
	<input type="text" id="ugroup" size="50" onfocus="completeGroup('#ugroup')"/>  
    </div>	
	  </td>
      </tr>
      
      <tr>
          <td>
           
          </td>
	  <td>
	  <div class="demo">
	  <button id="create_user">Create User</button>
	  </div>
	  </td>
      </tr>
      
  </table>
    
    
    
    
      <table id="edituser">
      <tr>
          <td>
            Username
          </td>
	  <td>
	    <input type="text" id="edit_username" />
	  </td>
      </tr>
      <tr>
          <td>
            Host 
          </td>
	  <td>
              <input type="text" id="edit_host" />
	  </td>
      </tr>
      <tr>
          <td>
            All Privileges 
          </td>
	  <td>

   <div class="ui-widget">
	<input id="edit_all_privileges" size="50" onfocus="completePrivileges('#edit_all_privileges')" />
     </div>              
	  </td>
      </tr>
      <tr>
          <td>
            User Privileges 
          </td>
	  <td>
  <div class="ui-widget">
	   <select id="edit_privileges">
	   <option value="">Privileges</option>
	</select>
</div> 
	  </td>
      </tr>
      
      <tr>
          <td>
            User Group 
          </td>
	  <td>
     <div class="ui-widget">
	   	<input type="text" id="edit_ugroup" size="50" onfocus="completeGroup('#edit_ugroup')">  
		</div>
	  </td>
      </tr>
      <tr>
          <td>
           
          </td>
          <td>
         <div class="demo">
	  <button>Edit User</button>
	  </div>
          </td>
      </tr>
      
  </table>
    
    <table id="buttons">
        <tr>
            <td>
		<div class="demo">
	           <button>Enable</button>
	     </div>
            </td>
             <td>
              	  <div class="demo">
	          <button>Disable</button>
	            </div>
            </td>
            <td>
		  <div class="demo">
	             <button>Delete</button>
	            </div>
            </td>
            <td>
             	  <div class="demo">
	               <button>Undelete</button>
	             </div>
            </td>
            <td>
				  <div class="demo">
	               <button>Permanent Delete</button>
	             </div>
            </td>
            <td>
				  <div class="demo">
	               <button>Reset Password</button>
	            </div>
            </td>
        </tr>
    </table>
    </div>
</body>
</html>